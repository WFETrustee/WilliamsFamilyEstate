name: Auto-generate Manifest Files (Active Only)

permissions:
  contents: write

on:
  push:
    branches:
      - master
    paths:
      - '**/*.html'
  workflow_dispatch:

jobs:
  generate-manifests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install cheerio --no-save

      - name: Generate manifests for active documents
        run: |
          node <<'EOF'
          const fs = require('fs');
          const path = require('path');
          const cheerio = require('cheerio');

          function getAllTemplateFolders(startPath) {
            return fs.readdirSync(startPath, { withFileTypes: true })
              .filter(entry => entry.isDirectory())
              .map(entry => entry.name)
              .filter(folder => fs.existsSync(path.join(startPath, folder, `${folder}_template.html`)));
          }

          const folders = getAllTemplateFolders('.');

          folders.forEach(folder => {
            const folderPath = path.join('.', folder);
            const files = fs.readdirSync(folderPath);
            const templateFile = `${folder}_template.html`;
            const manifest = [];

            files.forEach(file => {
              if (!file.endsWith('.html') || file === 'index.html' || file === templateFile) return;

              const fullPath = path.join(folderPath, file);
              const html = fs.readFileSync(fullPath, 'utf8');
              const $ = cheerio.load(html);
              const status = $('meta[name="doc-status"]').attr('content')?.toLowerCase();

              if (status === 'active') {
                const lastModified = fs.statSync(fullPath).mtime.toISOString();
                manifest.push({ filename: file, lastModified });
              }
            });

            const manifestPath = path.join(folderPath, 'manifest.json');
            fs.writeFileSync(manifestPath, JSON.stringify(manifest, null, 2));
            console.log(`Updated: ${manifestPath}`);
          });
          EOF

      - name: Generate QR routing table
        run: |
          echo "{" > qr-routes.json
          FIRST=true
          for file in $(find . -type f -name '*.html'); do
            if grep -iq '<meta[^>]*name="content-certified"[^>]*content="true"' "$file"; then
              ID=$(grep -i '<meta[^>]*name="doc-id"' "$file" | sed -E 's/.*content="([^"]+)".*/\1/')
              REL="${file#./}"
              if [ "$FIRST" = false ]; then echo "," >> qr-routes.json; fi
              echo "  \"$ID\": \"$REL\"" >> qr-routes.json
              FIRST=false
            fi
          done
          echo "}" >> qr-routes.json

      - name: Configure Git identity
        run: |
          git config user.name "WFE Bot"
          git config user.email "trustee@williamsfamilyestate.org"

      - name: Push updated manifests and QR routes
        run: |
          git fetch origin master
          git add */manifest.json
          git add qr-routes.json
          git commit -m "Auto-update manifest.json (active only) and QR routes" || echo "No changes to commit"
          git push origin HEAD:master

  trigger-deploy:
    needs: generate-manifests
    runs-on: ubuntu-latest
    steps:
      - name: Trigger deploy-public workflow
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.WFE_AUTOPUSH_TOKEN }}
          repository: ${{ github.repository }}
          workflow: deploy-public.yml

